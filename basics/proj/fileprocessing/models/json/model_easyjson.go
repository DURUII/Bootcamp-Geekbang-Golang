// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package json

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC80ae7adDecodeEnglishVocabFileprocessingInternal(in *jlexer.Lexer, out *VocItemList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(VocItemList, 0, 1)
			} else {
				*out = VocItemList{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 VocItem
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeEnglishVocabFileprocessingInternal(out *jwriter.Writer, in VocItemList) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v VocItemList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeEnglishVocabFileprocessingInternal(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VocItemList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeEnglishVocabFileprocessingInternal(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VocItemList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeEnglishVocabFileprocessingInternal(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VocItemList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeEnglishVocabFileprocessingInternal(l, v)
}
func easyjsonC80ae7adDecodeEnglishVocabFileprocessingInternal1(in *jlexer.Lexer, out *VocItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "word":
			out.Word = string(in.String())
		case "translations":
			if in.IsNull() {
				in.Skip()
				out.Translations = nil
			} else {
				in.Delim('[')
				if out.Translations == nil {
					if !in.IsDelim(']') {
						out.Translations = make([]Definition, 0, 2)
					} else {
						out.Translations = []Definition{}
					}
				} else {
					out.Translations = (out.Translations)[:0]
				}
				for !in.IsDelim(']') {
					var v4 Definition
					(v4).UnmarshalEasyJSON(in)
					out.Translations = append(out.Translations, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "phrases":
			if in.IsNull() {
				in.Skip()
				out.Phrases = nil
			} else {
				in.Delim('[')
				if out.Phrases == nil {
					if !in.IsDelim(']') {
						out.Phrases = make([]Phrase, 0, 2)
					} else {
						out.Phrases = []Phrase{}
					}
				} else {
					out.Phrases = (out.Phrases)[:0]
				}
				for !in.IsDelim(']') {
					var v5 Phrase
					(v5).UnmarshalEasyJSON(in)
					out.Phrases = append(out.Phrases, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeEnglishVocabFileprocessingInternal1(out *jwriter.Writer, in VocItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"word\":"
		out.RawString(prefix[1:])
		out.String(string(in.Word))
	}
	{
		const prefix string = ",\"translations\":"
		out.RawString(prefix)
		if in.Translations == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.Translations {
				if v6 > 0 {
					out.RawByte(',')
				}
				(v7).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"phrases\":"
		out.RawString(prefix)
		if in.Phrases == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Phrases {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VocItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeEnglishVocabFileprocessingInternal1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VocItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeEnglishVocabFileprocessingInternal1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VocItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeEnglishVocabFileprocessingInternal1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VocItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeEnglishVocabFileprocessingInternal1(l, v)
}
func easyjsonC80ae7adDecodeEnglishVocabFileprocessingInternal2(in *jlexer.Lexer, out *Phrase) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "phrase":
			out.Phrase = string(in.String())
		case "translation":
			out.Translation = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeEnglishVocabFileprocessingInternal2(out *jwriter.Writer, in Phrase) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"phrase\":"
		out.RawString(prefix[1:])
		out.String(string(in.Phrase))
	}
	{
		const prefix string = ",\"translation\":"
		out.RawString(prefix)
		out.String(string(in.Translation))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Phrase) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeEnglishVocabFileprocessingInternal2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Phrase) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeEnglishVocabFileprocessingInternal2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Phrase) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeEnglishVocabFileprocessingInternal2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Phrase) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeEnglishVocabFileprocessingInternal2(l, v)
}
func easyjsonC80ae7adDecodeEnglishVocabFileprocessingInternal3(in *jlexer.Lexer, out *Definition) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "translation":
			out.Translation = string(in.String())
		case "type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeEnglishVocabFileprocessingInternal3(out *jwriter.Writer, in Definition) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"translation\":"
		out.RawString(prefix[1:])
		out.String(string(in.Translation))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Definition) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeEnglishVocabFileprocessingInternal3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Definition) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeEnglishVocabFileprocessingInternal3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Definition) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeEnglishVocabFileprocessingInternal3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Definition) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeEnglishVocabFileprocessingInternal3(l, v)
}
